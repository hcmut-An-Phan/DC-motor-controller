
BT_chuong_4_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c0  080043c0  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080043c0  080043c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043c8  080043c8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043cc  080043cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080043d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000234  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000254  20000254  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d22c  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c62  00000000  00000000  0002d2bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c68  00000000  00000000  0002ef28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009c5  00000000  00000000  0002fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002019f  00000000  00000000  00030555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000ec85  00000000  00000000  000506f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c738c  00000000  00000000  0005f379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003474  00000000  00000000  00126708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00129b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004388 	.word	0x08004388

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08004388 	.word	0x08004388

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fed4 	bl	8001274 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f82a 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fa26 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 f9fc 	bl	80008d0 <MX_DMA_Init>
  MX_TIM1_Init();
 80004d8:	f000 f88e 	bl	80005f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004dc:	f000 f92c 	bl	8000738 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f9cc 	bl	800087c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004e4:	f000 f97c 	bl	80007e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80004e8:	2100      	movs	r1, #0
 80004ea:	480b      	ldr	r0, [pc, #44]	; (8000518 <main+0x54>)
 80004ec:	f002 fa98 	bl	8002a20 <HAL_TIM_PWM_Start>
	
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);  
 80004f0:	2100      	movs	r1, #0
 80004f2:	480a      	ldr	r0, [pc, #40]	; (800051c <main+0x58>)
 80004f4:	f002 fb5c 	bl	8002bb0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_2);
 80004f8:	2104      	movs	r1, #4
 80004fa:	4808      	ldr	r0, [pc, #32]	; (800051c <main+0x58>)
 80004fc:	f002 fb58 	bl	8002bb0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1);
 8000500:	2100      	movs	r1, #0
 8000502:	4806      	ldr	r0, [pc, #24]	; (800051c <main+0x58>)
 8000504:	f002 fd22 	bl	8002f4c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);
 8000508:	2104      	movs	r1, #4
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <main+0x58>)
 800050c:	f002 fd1e 	bl	8002f4c <HAL_TIM_Encoder_Start>
	
	HAL_TIM_Base_Start_IT(&htim3);
 8000510:	4803      	ldr	r0, [pc, #12]	; (8000520 <main+0x5c>)
 8000512:	f002 f9bb 	bl	800288c <HAL_TIM_Base_Start_IT>
	//HAL_UART_Transmit_DMA(&huart2, Tx_buff, MAX_LEN - 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	e7fe      	b.n	8000516 <main+0x52>
 8000518:	2000003c 	.word	0x2000003c
 800051c:	20000084 	.word	0x20000084
 8000520:	200000cc 	.word	0x200000cc

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fefc 	bl	8004330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <SystemClock_Config+0xd0>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000598:	23a8      	movs	r3, #168	; 0xa8
 800059a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0320 	add.w	r3, r7, #32
 80005a8:	4618      	mov	r0, r3
 80005aa:	f001 fc87 	bl	8001ebc <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b4:	f000 fc30 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2105      	movs	r1, #5
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fee8 	bl	80023ac <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005e2:	f000 fc19 	bl	8000e18 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2220      	movs	r2, #32
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f003 fe7d 	bl	8004330 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000636:	4b3e      	ldr	r3, [pc, #248]	; (8000730 <MX_TIM1_Init+0x138>)
 8000638:	4a3e      	ldr	r2, [pc, #248]	; (8000734 <MX_TIM1_Init+0x13c>)
 800063a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 41;
 800063c:	4b3c      	ldr	r3, [pc, #240]	; (8000730 <MX_TIM1_Init+0x138>)
 800063e:	2229      	movs	r2, #41	; 0x29
 8000640:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <MX_TIM1_Init+0x138>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 199;
 8000648:	4b39      	ldr	r3, [pc, #228]	; (8000730 <MX_TIM1_Init+0x138>)
 800064a:	22c7      	movs	r2, #199	; 0xc7
 800064c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <MX_TIM1_Init+0x138>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000654:	4b36      	ldr	r3, [pc, #216]	; (8000730 <MX_TIM1_Init+0x138>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065a:	4b35      	ldr	r3, [pc, #212]	; (8000730 <MX_TIM1_Init+0x138>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000660:	4833      	ldr	r0, [pc, #204]	; (8000730 <MX_TIM1_Init+0x138>)
 8000662:	f002 f8c3 	bl	80027ec <HAL_TIM_Base_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800066c:	f000 fbd4 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000676:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800067a:	4619      	mov	r1, r3
 800067c:	482c      	ldr	r0, [pc, #176]	; (8000730 <MX_TIM1_Init+0x138>)
 800067e:	f002 febd 	bl	80033fc <HAL_TIM_ConfigClockSource>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000688:	f000 fbc6 	bl	8000e18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800068c:	4828      	ldr	r0, [pc, #160]	; (8000730 <MX_TIM1_Init+0x138>)
 800068e:	f002 f96d 	bl	800296c <HAL_TIM_PWM_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000698:	f000 fbbe 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006a8:	4619      	mov	r1, r3
 80006aa:	4821      	ldr	r0, [pc, #132]	; (8000730 <MX_TIM1_Init+0x138>)
 80006ac:	f003 fa9c 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80006b6:	f000 fbaf 	bl	8000e18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ba:	2360      	movs	r3, #96	; 0x60
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006c6:	2300      	movs	r3, #0
 80006c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006d2:	2300      	movs	r3, #0
 80006d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	4814      	ldr	r0, [pc, #80]	; (8000730 <MX_TIM1_Init+0x138>)
 80006e0:	f002 fdca 	bl	8003278 <HAL_TIM_PWM_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80006ea:	f000 fb95 	bl	8000e18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000706:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	4619      	mov	r1, r3
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <MX_TIM1_Init+0x138>)
 8000712:	f003 fae5 	bl	8003ce0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800071c:	f000 fb7c 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <MX_TIM1_Init+0x138>)
 8000722:	f000 fc33 	bl	8000f8c <HAL_TIM_MspPostInit>

}
 8000726:	bf00      	nop
 8000728:	3758      	adds	r7, #88	; 0x58
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000003c 	.word	0x2000003c
 8000734:	40010000 	.word	0x40010000

08000738 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2224      	movs	r2, #36	; 0x24
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f003 fdf2 	bl	8004330 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000754:	4b21      	ldr	r3, [pc, #132]	; (80007dc <MX_TIM2_Init+0xa4>)
 8000756:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800075a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800075c:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_TIM2_Init+0xa4>)
 800075e:	2200      	movs	r2, #0
 8000760:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_TIM2_Init+0xa4>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000768:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_TIM2_Init+0xa4>)
 800076a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_TIM2_Init+0xa4>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_TIM2_Init+0xa4>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800077c:	2303      	movs	r3, #3
 800077e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000784:	2301      	movs	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800078c:	230a      	movs	r3, #10
 800078e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000794:	2301      	movs	r3, #1
 8000796:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800079c:	230a      	movs	r3, #10
 800079e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	480d      	ldr	r0, [pc, #52]	; (80007dc <MX_TIM2_Init+0xa4>)
 80007a8:	f002 fb2a 	bl	8002e00 <HAL_TIM_Encoder_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007b2:	f000 fb31 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <MX_TIM2_Init+0xa4>)
 80007c4:	f003 fa10 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007ce:	f000 fb23 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	3730      	adds	r7, #48	; 0x30
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000084 	.word	0x20000084

080007e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_TIM3_Init+0x94>)
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <MX_TIM3_Init+0x98>)
 8000800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_TIM3_Init+0x94>)
 8000804:	2253      	movs	r2, #83	; 0x53
 8000806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_TIM3_Init+0x94>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_TIM3_Init+0x94>)
 8000810:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_TIM3_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_TIM3_Init+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_TIM3_Init+0x94>)
 8000824:	f001 ffe2 	bl	80027ec <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 faf3 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000838:	f107 0308 	add.w	r3, r7, #8
 800083c:	4619      	mov	r1, r3
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_TIM3_Init+0x94>)
 8000840:	f002 fddc 	bl	80033fc <HAL_TIM_ConfigClockSource>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800084a:	f000 fae5 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_TIM3_Init+0x94>)
 800085c:	f003 f9c4 	bl	8003be8 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000866:	f000 fad7 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000cc 	.word	0x200000cc
 8000878:	40000400 	.word	0x40000400

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_USART2_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f003 fa7a 	bl	8003dac <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 faab 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000114 	.word	0x20000114
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_DMA_Init+0x4c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a0f      	ldr	r2, [pc, #60]	; (800091c <MX_DMA_Init+0x4c>)
 80008e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_DMA_Init+0x4c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2010      	movs	r0, #16
 80008f8:	f000 fe09 	bl	800150e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008fc:	2010      	movs	r0, #16
 80008fe:	f000 fe22 	bl	8001546 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	2011      	movs	r0, #17
 8000908:	f000 fe01 	bl	800150e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800090c:	2011      	movs	r0, #17
 800090e:	f000 fe1a 	bl	8001546 <HAL_NVIC_EnableIRQ>

}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_GPIO_Init+0xb4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a25      	ldr	r2, [pc, #148]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <MX_GPIO_Init+0xb4>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0310 	and.w	r3, r3, #16
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <MX_GPIO_Init+0xb4>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_GPIO_Init+0xb4>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2106      	movs	r1, #6
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0xb8>)
 80009ac:	f001 fa6c 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD1 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80009b0:	2306      	movs	r3, #6
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0xb8>)
 80009c8:	f001 f8c2 	bl	8001b50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020c00 	.word	0x40020c00

080009dc <HAL_TIM_IC_CaptureCallback>:
	}
}

// timer 2 interup input capture to read encoder
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
	/* read encoder mode x1 */
	if (encoder_mode == 1)
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0x98>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d132      	bne.n	8000a52 <HAL_TIM_IC_CaptureCallback+0x76>
	{
		encoder_direction_CCW =__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	2b10      	cmp	r3, #16
 80009f8:	bf0c      	ite	eq
 80009fa:	2301      	moveq	r3, #1
 80009fc:	2300      	movne	r3, #0
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	b25a      	sxtb	r2, r3
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000a04:	701a      	strb	r2, [r3, #0]
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7f1b      	ldrb	r3, [r3, #28]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d11c      	bne.n	8000a48 <HAL_TIM_IC_CaptureCallback+0x6c>
		{
			if (encoder_direction_CCW == 1)
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000a10:	f993 3000 	ldrsb.w	r3, [r3]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d109      	bne.n	8000a2c <HAL_TIM_IC_CaptureCallback+0x50>
			{
				enc_val_x1--;
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	3b01      	subs	r3, #1
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	b21a      	sxth	r2, r3
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000a28:	801a      	strh	r2, [r3, #0]
 8000a2a:	e00d      	b.n	8000a48 <HAL_TIM_IC_CaptureCallback+0x6c>
			}
			else if (encoder_direction_CCW == 0)
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d108      	bne.n	8000a48 <HAL_TIM_IC_CaptureCallback+0x6c>
			{
				enc_val_x1++;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000a46:	801a      	strh	r2, [r3, #0]
			}
		}
		enc_val = enc_val_x1;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000a50:	801a      	strh	r2, [r3, #0]
	}
	
	/* read encoder mode x4 */
	if (encoder_mode == 4){
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_TIM_IC_CaptureCallback+0x98>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	d105      	bne.n	8000a66 <HAL_TIM_IC_CaptureCallback+0x8a>
		enc_val = __HAL_TIM_GET_COUNTER(&htim2) ;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000a64:	801a      	strh	r2, [r3, #0]
	}	
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000000 	.word	0x20000000
 8000a78:	20000084 	.word	0x20000084
 8000a7c:	2000021c 	.word	0x2000021c
 8000a80:	2000021a 	.word	0x2000021a
 8000a84:	20000218 	.word	0x20000218

08000a88 <HAL_TIM_PeriodElapsedCallback>:

// timer3 call back every 1ms for PID control
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d105      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		// calculate current position
		calculateAnglePosition();
 8000a9a:	f000 f80b 	bl	8000ab4 <calculateAnglePosition>
		calculatePID();
 8000a9e:	f000 f89d 	bl	8000bdc <calculatePID>
		driveMotor();
 8000aa2:	f000 f95f 	bl	8000d64 <driveMotor>
		// calculate pid output
		// control motor
		// feed back current position to pc
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40000400 	.word	0x40000400

08000ab4 <calculateAnglePosition>:

void calculateAnglePosition(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	current_position = (enc_val * 360)/(encoder_mode * PULSE_PER_REVOLUTION);
 8000ab8:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <calculateAnglePosition+0x114>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b21b      	sxth	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000ac4:	fb03 f202 	mul.w	r2, r3, r2
 8000ac8:	4b40      	ldr	r3, [pc, #256]	; (8000bcc <calculateAnglePosition+0x118>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	460b      	mov	r3, r1
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	440b      	add	r3, r1
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ada:	ee07 3a90 	vmov	s15, r3
 8000ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ae2:	4b3b      	ldr	r3, [pc, #236]	; (8000bd0 <calculateAnglePosition+0x11c>)
 8000ae4:	edc3 7a00 	vstr	s15, [r3]
	if(current_position > 360) 
 8000ae8:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <calculateAnglePosition+0x11c>)
 8000aea:	edd3 7a00 	vldr	s15, [r3]
 8000aee:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000bd4 <calculateAnglePosition+0x120>
 8000af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afa:	dd2a      	ble.n	8000b52 <calculateAnglePosition+0x9e>
	{
		enc_val = enc_val % (encoder_mode * PULSE_PER_REVOLUTION);
 8000afc:	4b32      	ldr	r3, [pc, #200]	; (8000bc8 <calculateAnglePosition+0x114>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	461a      	mov	r2, r3
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <calculateAnglePosition+0x118>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	440b      	add	r3, r1
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	fb92 f1f3 	sdiv	r1, r2, r3
 8000b16:	fb01 f303 	mul.w	r3, r1, r3
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	b21a      	sxth	r2, r3
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <calculateAnglePosition+0x114>)
 8000b20:	801a      	strh	r2, [r3, #0]
		current_position = (enc_val * 360)/(encoder_mode * PULSE_PER_REVOLUTION);
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <calculateAnglePosition+0x114>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000b2e:	fb03 f202 	mul.w	r2, r3, r2
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <calculateAnglePosition+0x118>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	460b      	mov	r3, r1
 8000b3a:	019b      	lsls	r3, r3, #6
 8000b3c:	440b      	add	r3, r1
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <calculateAnglePosition+0x11c>)
 8000b4e:	edc3 7a00 	vstr	s15, [r3]
	}	
	if(current_position < -360) 
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <calculateAnglePosition+0x11c>)
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000bd8 <calculateAnglePosition+0x124>
 8000b5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b64:	d400      	bmi.n	8000b68 <calculateAnglePosition+0xb4>
	{
		enc_val = enc_val % (encoder_mode * PULSE_PER_REVOLUTION);
		current_position = (enc_val * 360)/(encoder_mode * PULSE_PER_REVOLUTION);
	}
}
 8000b66:	e02a      	b.n	8000bbe <calculateAnglePosition+0x10a>
		enc_val = enc_val % (encoder_mode * PULSE_PER_REVOLUTION);
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <calculateAnglePosition+0x114>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <calculateAnglePosition+0x118>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	460b      	mov	r3, r1
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	440b      	add	r3, r1
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	fb92 f1f3 	sdiv	r1, r2, r3
 8000b82:	fb01 f303 	mul.w	r3, r1, r3
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	b21a      	sxth	r2, r3
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <calculateAnglePosition+0x114>)
 8000b8c:	801a      	strh	r2, [r3, #0]
		current_position = (enc_val * 360)/(encoder_mode * PULSE_PER_REVOLUTION);
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <calculateAnglePosition+0x114>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000b9a:	fb03 f202 	mul.w	r2, r3, r2
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <calculateAnglePosition+0x118>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	019b      	lsls	r3, r3, #6
 8000ba8:	440b      	add	r3, r1
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <calculateAnglePosition+0x11c>)
 8000bba:	edc3 7a00 	vstr	s15, [r3]
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	20000218 	.word	0x20000218
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000220 	.word	0x20000220
 8000bd4:	43b40000 	.word	0x43b40000
 8000bd8:	c3b40000 	.word	0xc3b40000

08000bdc <calculatePID>:

void calculatePID(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	T = (float)(Tms/1000);
 8000be0:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <calculatePID+0x138>)
 8000be2:	ed93 7a00 	vldr	s14, [r3]
 8000be6:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8000d18 <calculatePID+0x13c>
 8000bea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bee:	4b4b      	ldr	r3, [pc, #300]	; (8000d1c <calculatePID+0x140>)
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
  error_value =  target_position - current_position; 
 8000bf4:	4b4a      	ldr	r3, [pc, #296]	; (8000d20 <calculatePID+0x144>)
 8000bf6:	ed93 7a00 	vldr	s14, [r3]
 8000bfa:	4b4a      	ldr	r3, [pc, #296]	; (8000d24 <calculatePID+0x148>)
 8000bfc:	edd3 7a00 	vldr	s15, [r3]
 8000c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c04:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <calculatePID+0x14c>)
 8000c06:	edc3 7a00 	vstr	s15, [r3]
	P_part = K_p * (error_value - previous_error);
 8000c0a:	4b47      	ldr	r3, [pc, #284]	; (8000d28 <calculatePID+0x14c>)
 8000c0c:	ed93 7a00 	vldr	s14, [r3]
 8000c10:	4b46      	ldr	r3, [pc, #280]	; (8000d2c <calculatePID+0x150>)
 8000c12:	edd3 7a00 	vldr	s15, [r3]
 8000c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c1a:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <calculatePID+0x154>)
 8000c1c:	edd3 7a00 	vldr	s15, [r3]
 8000c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c24:	4b43      	ldr	r3, [pc, #268]	; (8000d34 <calculatePID+0x158>)
 8000c26:	edc3 7a00 	vstr	s15, [r3]
	I_part = (float)0.5 * K_i * T * (error_value + previous_error);
 8000c2a:	4b43      	ldr	r3, [pc, #268]	; (8000d38 <calculatePID+0x15c>)
 8000c2c:	edd3 7a00 	vldr	s15, [r3]
 8000c30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c38:	4b38      	ldr	r3, [pc, #224]	; (8000d1c <calculatePID+0x140>)
 8000c3a:	edd3 7a00 	vldr	s15, [r3]
 8000c3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <calculatePID+0x14c>)
 8000c44:	edd3 6a00 	vldr	s13, [r3]
 8000c48:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <calculatePID+0x150>)
 8000c4a:	edd3 7a00 	vldr	s15, [r3]
 8000c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c56:	4b39      	ldr	r3, [pc, #228]	; (8000d3c <calculatePID+0x160>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
	D_part = (K_d * (error_value - 2 * previous_error + pre_previous_error))/T; 
 8000c5c:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <calculatePID+0x14c>)
 8000c5e:	ed93 7a00 	vldr	s14, [r3]
 8000c62:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <calculatePID+0x150>)
 8000c64:	edd3 7a00 	vldr	s15, [r3]
 8000c68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c70:	4b33      	ldr	r3, [pc, #204]	; (8000d40 <calculatePID+0x164>)
 8000c72:	edd3 7a00 	vldr	s15, [r3]
 8000c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <calculatePID+0x168>)
 8000c7c:	edd3 7a00 	vldr	s15, [r3]
 8000c80:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000c84:	4b25      	ldr	r3, [pc, #148]	; (8000d1c <calculatePID+0x140>)
 8000c86:	ed93 7a00 	vldr	s14, [r3]
 8000c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c8e:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <calculatePID+0x16c>)
 8000c90:	edc3 7a00 	vstr	s15, [r3]

  control_signal = pre_control_signal + P_part + I_part + D_part; 
 8000c94:	4b2d      	ldr	r3, [pc, #180]	; (8000d4c <calculatePID+0x170>)
 8000c96:	ed93 7a00 	vldr	s14, [r3]
 8000c9a:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <calculatePID+0x158>)
 8000c9c:	edd3 7a00 	vldr	s15, [r3]
 8000ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <calculatePID+0x160>)
 8000ca6:	edd3 7a00 	vldr	s15, [r3]
 8000caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <calculatePID+0x16c>)
 8000cb0:	edd3 7a00 	vldr	s15, [r3]
 8000cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb8:	4b25      	ldr	r3, [pc, #148]	; (8000d50 <calculatePID+0x174>)
 8000cba:	edc3 7a00 	vstr	s15, [r3]
	
	if (control_signal > 199) control_signal = 199;
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <calculatePID+0x174>)
 8000cc0:	edd3 7a00 	vldr	s15, [r3]
 8000cc4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000d54 <calculatePID+0x178>
 8000cc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd0:	dd02      	ble.n	8000cd8 <calculatePID+0xfc>
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <calculatePID+0x174>)
 8000cd4:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <calculatePID+0x17c>)
 8000cd6:	601a      	str	r2, [r3, #0]

	if (control_signal < -199) control_signal = -199;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <calculatePID+0x174>)
 8000cda:	edd3 7a00 	vldr	s15, [r3]
 8000cde:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000d5c <calculatePID+0x180>
 8000ce2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cea:	d502      	bpl.n	8000cf2 <calculatePID+0x116>
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <calculatePID+0x174>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <calculatePID+0x184>)
 8000cf0:	601a      	str	r2, [r3, #0]
	
	/* save previous value for the next calculated iteration */
	pre_previous_error = previous_error;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <calculatePID+0x150>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <calculatePID+0x164>)
 8000cf8:	6013      	str	r3, [r2, #0]
  previous_error = error_value; 
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <calculatePID+0x14c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <calculatePID+0x150>)
 8000d00:	6013      	str	r3, [r2, #0]
	pre_control_signal = control_signal;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <calculatePID+0x174>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <calculatePID+0x170>)
 8000d08:	6013      	str	r3, [r2, #0]
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	20000010 	.word	0x20000010
 8000d18:	447a0000 	.word	0x447a0000
 8000d1c:	2000024c 	.word	0x2000024c
 8000d20:	20000004 	.word	0x20000004
 8000d24:	20000220 	.word	0x20000220
 8000d28:	20000234 	.word	0x20000234
 8000d2c:	2000022c 	.word	0x2000022c
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000240 	.word	0x20000240
 8000d38:	20000228 	.word	0x20000228
 8000d3c:	20000244 	.word	0x20000244
 8000d40:	20000230 	.word	0x20000230
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	20000248 	.word	0x20000248
 8000d4c:	2000023c 	.word	0x2000023c
 8000d50:	20000238 	.word	0x20000238
 8000d54:	43470000 	.word	0x43470000
 8000d58:	43470000 	.word	0x43470000
 8000d5c:	c3470000 	.word	0xc3470000
 8000d60:	c3470000 	.word	0xc3470000

08000d64 <driveMotor>:

void driveMotor(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	//Determine speed and direction based on the value of the control signal
  //direction
  if (control_signal < 0) //negative value: CCW
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <driveMotor+0xa4>)
 8000d6a:	edd3 7a00 	vldr	s15, [r3]
 8000d6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d76:	d516      	bpl.n	8000da6 <driveMotor+0x42>
  {
		PWMvalue = -(int)control_signal; //PWM values cannot be negative and have to be integers
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <driveMotor+0xa4>)
 8000d7a:	edd3 7a00 	vldr	s15, [r3]
 8000d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d82:	ee17 3a90 	vmov	r3, s15
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	425b      	negs	r3, r3
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <driveMotor+0xa8>)
 8000d8e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2102      	movs	r1, #2
 8000d94:	481e      	ldr	r0, [pc, #120]	; (8000e10 <driveMotor+0xac>)
 8000d96:	f001 f877 	bl	8001e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,1);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	481c      	ldr	r0, [pc, #112]	; (8000e10 <driveMotor+0xac>)
 8000da0:	f001 f872 	bl	8001e88 <HAL_GPIO_WritePin>
 8000da4:	e029      	b.n	8000dfa <driveMotor+0x96>
  }
  else if (control_signal > 0) //positive: CW
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <driveMotor+0xa4>)
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db4:	dd14      	ble.n	8000de0 <driveMotor+0x7c>
  {
		PWMvalue = (int)control_signal;
 8000db6:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <driveMotor+0xa4>)
 8000db8:	edd3 7a00 	vldr	s15, [r3]
 8000dbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dc0:	ee17 3a90 	vmov	r3, s15
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <driveMotor+0xa8>)
 8000dc8:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,1);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4810      	ldr	r0, [pc, #64]	; (8000e10 <driveMotor+0xac>)
 8000dd0:	f001 f85a 	bl	8001e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <driveMotor+0xac>)
 8000dda:	f001 f855 	bl	8001e88 <HAL_GPIO_WritePin>
 8000dde:	e00c      	b.n	8000dfa <driveMotor+0x96>
  }
  else //0: STOP - this might be a bad practice when you overshoot the setpoint
  {
		PWMvalue = 0;
 8000de0:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <driveMotor+0xa8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	4809      	ldr	r0, [pc, #36]	; (8000e10 <driveMotor+0xac>)
 8000dec:	f001 f84c 	bl	8001e88 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2104      	movs	r1, #4
 8000df4:	4806      	ldr	r0, [pc, #24]	; (8000e10 <driveMotor+0xac>)
 8000df6:	f001 f847 	bl	8001e88 <HAL_GPIO_WritePin>
  }
  //Then we set the motor speed
  __HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,PWMvalue);
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <driveMotor+0xa8>)
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <driveMotor+0xb0>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
//  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_1,1);
//  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,0);
}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000238 	.word	0x20000238
 8000e0c:	20000224 	.word	0x20000224
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	2000003c 	.word	0x2000003c

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e38:	6453      	str	r3, [r2, #68]	; 0x44
 8000e3a:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <HAL_TIM_Base_MspInit+0x70>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10e      	bne.n	8000ea4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_TIM_Base_MspInit+0x74>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <HAL_TIM_Base_MspInit+0x74>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_TIM_Base_MspInit+0x74>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ea2:	e01a      	b.n	8000eda <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a10      	ldr	r2, [pc, #64]	; (8000eec <HAL_TIM_Base_MspInit+0x78>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d115      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_TIM_Base_MspInit+0x74>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_TIM_Base_MspInit+0x74>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_TIM_Base_MspInit+0x74>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201d      	movs	r0, #29
 8000ed0:	f000 fb1d 	bl	800150e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ed4:	201d      	movs	r0, #29
 8000ed6:	f000 fb36 	bl	8001546 <HAL_NVIC_EnableIRQ>
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40000400 	.word	0x40000400

08000ef0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f10:	d133      	bne.n	8000f7a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x94>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <HAL_TIM_Encoder_MspInit+0x98>)
 8000f66:	f000 fdf3 	bl	8001b50 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	201c      	movs	r0, #28
 8000f70:	f000 facd 	bl	800150e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f74:	201c      	movs	r0, #28
 8000f76:	f000 fae6 	bl	8001546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000

08000f8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <HAL_TIM_MspPostInit+0x68>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d11e      	bne.n	8000fec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_TIM_MspPostInit+0x6c>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_TIM_MspPostInit+0x6c>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_TIM_MspPostInit+0x6c>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_TIM_MspPostInit+0x70>)
 8000fe8:	f000 fdb2 	bl	8001b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a47      	ldr	r2, [pc, #284]	; (800113c <HAL_UART_MspInit+0x13c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	f040 8088 	bne.w	8001134 <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	4b45      	ldr	r3, [pc, #276]	; (8001140 <HAL_UART_MspInit+0x140>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a44      	ldr	r2, [pc, #272]	; (8001140 <HAL_UART_MspInit+0x140>)
 800102e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b42      	ldr	r3, [pc, #264]	; (8001140 <HAL_UART_MspInit+0x140>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <HAL_UART_MspInit+0x140>)
 8001046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001048:	4a3d      	ldr	r2, [pc, #244]	; (8001140 <HAL_UART_MspInit+0x140>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6313      	str	r3, [r2, #48]	; 0x30
 8001050:	4b3b      	ldr	r3, [pc, #236]	; (8001140 <HAL_UART_MspInit+0x140>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800105c:	230c      	movs	r3, #12
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106c:	2307      	movs	r3, #7
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4833      	ldr	r0, [pc, #204]	; (8001144 <HAL_UART_MspInit+0x144>)
 8001078:	f000 fd6a 	bl	8001b50 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <HAL_UART_MspInit+0x148>)
 800107e:	4a33      	ldr	r2, [pc, #204]	; (800114c <HAL_UART_MspInit+0x14c>)
 8001080:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001082:	4b31      	ldr	r3, [pc, #196]	; (8001148 <HAL_UART_MspInit+0x148>)
 8001084:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001088:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_UART_MspInit+0x148>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001090:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <HAL_UART_MspInit+0x148>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <HAL_UART_MspInit+0x148>)
 8001098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <HAL_UART_MspInit+0x148>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <HAL_UART_MspInit+0x148>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <HAL_UART_MspInit+0x148>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <HAL_UART_MspInit+0x148>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <HAL_UART_MspInit+0x148>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010bc:	4822      	ldr	r0, [pc, #136]	; (8001148 <HAL_UART_MspInit+0x148>)
 80010be:	f000 fa5d 	bl	800157c <HAL_DMA_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80010c8:	f7ff fea6 	bl	8000e18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <HAL_UART_MspInit+0x148>)
 80010d0:	639a      	str	r2, [r3, #56]	; 0x38
 80010d2:	4a1d      	ldr	r2, [pc, #116]	; (8001148 <HAL_UART_MspInit+0x148>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80010d8:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <HAL_UART_MspInit+0x150>)
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_UART_MspInit+0x154>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_UART_MspInit+0x150>)
 80010e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <HAL_UART_MspInit+0x150>)
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_UART_MspInit+0x150>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_UART_MspInit+0x150>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_UART_MspInit+0x150>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001100:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_UART_MspInit+0x150>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_UART_MspInit+0x150>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_UART_MspInit+0x150>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_UART_MspInit+0x150>)
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <HAL_UART_MspInit+0x150>)
 800111a:	f000 fa2f 	bl	800157c <HAL_DMA_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001124:	f7ff fe78 	bl	8000e18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <HAL_UART_MspInit+0x150>)
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
 800112e:	4a08      	ldr	r2, [pc, #32]	; (8001150 <HAL_UART_MspInit+0x150>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001134:	bf00      	nop
 8001136:	3728      	adds	r7, #40	; 0x28
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40004400 	.word	0x40004400
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000
 8001148:	20000158 	.word	0x20000158
 800114c:	40026088 	.word	0x40026088
 8001150:	200001b8 	.word	0x200001b8
 8001154:	400260a0 	.word	0x400260a0

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f8b8 	bl	8001318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <DMA1_Stream5_IRQHandler+0x10>)
 80011b2:	f000 fa91 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000158 	.word	0x20000158

080011c0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA1_Stream6_IRQHandler+0x10>)
 80011c6:	f000 fa87 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001b8 	.word	0x200001b8

080011d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <TIM2_IRQHandler+0x10>)
 80011da:	f001 ff45 	bl	8003068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000084 	.word	0x20000084

080011e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <TIM3_IRQHandler+0x10>)
 80011ee:	f001 ff3b 	bl	8003068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200000cc 	.word	0x200000cc

080011fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <SystemInit+0x20>)
 8001202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <SystemInit+0x20>)
 8001208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001220:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001258 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001224:	480d      	ldr	r0, [pc, #52]	; (800125c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001226:	490e      	ldr	r1, [pc, #56]	; (8001260 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001228:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800122c:	e002      	b.n	8001234 <LoopCopyDataInit>

0800122e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800122e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001230:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001232:	3304      	adds	r3, #4

08001234 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001234:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001236:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001238:	d3f9      	bcc.n	800122e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800123c:	4c0b      	ldr	r4, [pc, #44]	; (800126c <LoopFillZerobss+0x26>)
  movs r3, #0
 800123e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001240:	e001      	b.n	8001246 <LoopFillZerobss>

08001242 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001242:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001244:	3204      	adds	r2, #4

08001246 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001246:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001248:	d3fb      	bcc.n	8001242 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800124a:	f7ff ffd7 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800124e:	f003 f877 	bl	8004340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001252:	f7ff f937 	bl	80004c4 <main>
  bx  lr    
 8001256:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001258:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001264:	080043d0 	.word	0x080043d0
  ldr r2, =_sbss
 8001268:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800126c:	20000254 	.word	0x20000254

08001270 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC_IRQHandler>
	...

08001274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <HAL_Init+0x40>)
 800127e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001282:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_Init+0x40>)
 800128a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <HAL_Init+0x40>)
 8001296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129c:	2003      	movs	r0, #3
 800129e:	f000 f92b 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a2:	200f      	movs	r0, #15
 80012a4:	f000 f808 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a8:	f7ff fdbc 	bl	8000e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023c00 	.word	0x40023c00

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x54>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_InitTick+0x58>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f943 	bl	8001562 <HAL_SYSTICK_Config>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e00e      	b.n	8001304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b0f      	cmp	r3, #15
 80012ea:	d80a      	bhi.n	8001302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ec:	2200      	movs	r2, #0
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	f04f 30ff 	mov.w	r0, #4294967295
 80012f4:	f000 f90b 	bl	800150e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <HAL_InitTick+0x5c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000014 	.word	0x20000014
 8001310:	2000001c 	.word	0x2000001c
 8001314:	20000018 	.word	0x20000018

08001318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_IncTick+0x20>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <HAL_IncTick+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4413      	add	r3, r2
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <HAL_IncTick+0x24>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	2000001c 	.word	0x2000001c
 800133c:	20000250 	.word	0x20000250

08001340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return uwTick;
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_GetTick+0x14>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000250 	.word	0x20000250

08001358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	60d3      	str	r3, [r2, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db0b      	blt.n	80013e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f003 021f 	and.w	r2, r3, #31
 80013d4:	4907      	ldr	r1, [pc, #28]	; (80013f4 <__NVIC_EnableIRQ+0x38>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	2001      	movs	r0, #1
 80013de:	fa00 f202 	lsl.w	r2, r0, r2
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	; (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f7ff ff8e 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff29 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff3e 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff8e 	bl	800144c <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff31 	bl	80013bc <__NVIC_EnableIRQ>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffa2 	bl	80014b4 <SysTick_Config>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001588:	f7ff feda 	bl	8001340 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e099      	b.n	80016cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0201 	bic.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b8:	e00f      	b.n	80015da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015ba:	f7ff fec1 	bl	8001340 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b05      	cmp	r3, #5
 80015c6:	d908      	bls.n	80015da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e078      	b.n	80016cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1e8      	bne.n	80015ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <HAL_DMA_Init+0x158>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800161e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	4313      	orrs	r3, r2
 800162a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	2b04      	cmp	r3, #4
 8001632:	d107      	bne.n	8001644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4313      	orrs	r3, r2
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	4313      	orrs	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f023 0307 	bic.w	r3, r3, #7
 800165a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4313      	orrs	r3, r2
 8001664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	2b04      	cmp	r3, #4
 800166c:	d117      	bne.n	800169e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4313      	orrs	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00e      	beq.n	800169e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f9e9 	bl	8001a58 <DMA_CheckFifoParam>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800169a:	2301      	movs	r3, #1
 800169c:	e016      	b.n	80016cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f9a0 	bl	80019ec <DMA_CalcBaseAndBitshift>
 80016ac:	4603      	mov	r3, r0
 80016ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b4:	223f      	movs	r2, #63	; 0x3f
 80016b6:	409a      	lsls	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	f010803f 	.word	0xf010803f

080016d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80016e4:	4b8e      	ldr	r3, [pc, #568]	; (8001920 <HAL_DMA_IRQHandler+0x248>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a8e      	ldr	r2, [pc, #568]	; (8001924 <HAL_DMA_IRQHandler+0x24c>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0a9b      	lsrs	r3, r3, #10
 80016f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	2208      	movs	r2, #8
 8001704:	409a      	lsls	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01a      	beq.n	8001744 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001730:	2208      	movs	r2, #8
 8001732:	409a      	lsls	r2, r3
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	f043 0201 	orr.w	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	2201      	movs	r2, #1
 800174a:	409a      	lsls	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d012      	beq.n	800177a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00b      	beq.n	800177a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001766:	2201      	movs	r2, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f043 0202 	orr.w	r2, r3, #2
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800177e:	2204      	movs	r2, #4
 8001780:	409a      	lsls	r2, r3
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d012      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00b      	beq.n	80017b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179c:	2204      	movs	r2, #4
 800179e:	409a      	lsls	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a8:	f043 0204 	orr.w	r2, r3, #4
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b4:	2210      	movs	r2, #16
 80017b6:	409a      	lsls	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d043      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d03c      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	2210      	movs	r2, #16
 80017d4:	409a      	lsls	r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d018      	beq.n	800181a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d108      	bne.n	8001808 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d024      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	4798      	blx	r3
 8001806:	e01f      	b.n	8001848 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01b      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e016      	b.n	8001848 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d107      	bne.n	8001838 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0208 	bic.w	r2, r2, #8
 8001836:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184c:	2220      	movs	r2, #32
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 808f 	beq.w	8001978 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 8087 	beq.w	8001978 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186e:	2220      	movs	r2, #32
 8001870:	409a      	lsls	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b05      	cmp	r3, #5
 8001880:	d136      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0216 	bic.w	r2, r2, #22
 8001890:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d103      	bne.n	80018b2 <HAL_DMA_IRQHandler+0x1da>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0208 	bic.w	r2, r2, #8
 80018c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018c6:	223f      	movs	r2, #63	; 0x3f
 80018c8:	409a      	lsls	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d07e      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
        }
        return;
 80018ee:	e079      	b.n	80019e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01d      	beq.n	800193a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10d      	bne.n	8001928 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	2b00      	cmp	r3, #0
 8001912:	d031      	beq.n	8001978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
 800191c:	e02c      	b.n	8001978 <HAL_DMA_IRQHandler+0x2a0>
 800191e:	bf00      	nop
 8001920:	20000014 	.word	0x20000014
 8001924:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d023      	beq.n	8001978 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
 8001938:	e01e      	b.n	8001978 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10f      	bne.n	8001968 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0210 	bic.w	r2, r2, #16
 8001956:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197c:	2b00      	cmp	r3, #0
 800197e:	d032      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d022      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2205      	movs	r2, #5
 8001990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	3301      	adds	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d307      	bcc.n	80019c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f2      	bne.n	80019a4 <HAL_DMA_IRQHandler+0x2cc>
 80019be:	e000      	b.n	80019c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	4798      	blx	r3
 80019e2:	e000      	b.n	80019e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80019e4:	bf00      	nop
    }
  }
}
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	3b10      	subs	r3, #16
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <DMA_CalcBaseAndBitshift+0x64>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <DMA_CalcBaseAndBitshift+0x68>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b03      	cmp	r3, #3
 8001a18:	d909      	bls.n	8001a2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a22:	f023 0303 	bic.w	r3, r3, #3
 8001a26:	1d1a      	adds	r2, r3, #4
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a2c:	e007      	b.n	8001a3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	aaaaaaab 	.word	0xaaaaaaab
 8001a54:	080043b8 	.word	0x080043b8

08001a58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d11f      	bne.n	8001ab2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d856      	bhi.n	8001b26 <DMA_CheckFifoParam+0xce>
 8001a78:	a201      	add	r2, pc, #4	; (adr r2, 8001a80 <DMA_CheckFifoParam+0x28>)
 8001a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a7e:	bf00      	nop
 8001a80:	08001a91 	.word	0x08001a91
 8001a84:	08001aa3 	.word	0x08001aa3
 8001a88:	08001a91 	.word	0x08001a91
 8001a8c:	08001b27 	.word	0x08001b27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d046      	beq.n	8001b2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aa0:	e043      	b.n	8001b2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aaa:	d140      	bne.n	8001b2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab0:	e03d      	b.n	8001b2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aba:	d121      	bne.n	8001b00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d837      	bhi.n	8001b32 <DMA_CheckFifoParam+0xda>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <DMA_CheckFifoParam+0x70>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001adf 	.word	0x08001adf
 8001ad0:	08001ad9 	.word	0x08001ad9
 8001ad4:	08001af1 	.word	0x08001af1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	73fb      	strb	r3, [r7, #15]
      break;
 8001adc:	e030      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d025      	beq.n	8001b36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001aee:	e022      	b.n	8001b36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001af8:	d11f      	bne.n	8001b3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001afe:	e01c      	b.n	8001b3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d903      	bls.n	8001b0e <DMA_CheckFifoParam+0xb6>
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d003      	beq.n	8001b14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b0c:	e018      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
      break;
 8001b12:	e015      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	73fb      	strb	r3, [r7, #15]
      break;
 8001b24:	e00b      	b.n	8001b3e <DMA_CheckFifoParam+0xe6>
      break;
 8001b26:	bf00      	nop
 8001b28:	e00a      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2a:	bf00      	nop
 8001b2c:	e008      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b2e:	bf00      	nop
 8001b30:	e006      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b32:	bf00      	nop
 8001b34:	e004      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b36:	bf00      	nop
 8001b38:	e002      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b3a:	bf00      	nop
 8001b3c:	e000      	b.n	8001b40 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3e:	bf00      	nop
    }
  } 
  
  return status; 
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	61fb      	str	r3, [r7, #28]
 8001b6a:	e16b      	b.n	8001e44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	f040 815a 	bne.w	8001e3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d005      	beq.n	8001ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d130      	bne.n	8001c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	2203      	movs	r2, #3
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd8:	2201      	movs	r2, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 0201 	and.w	r2, r3, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d017      	beq.n	8001c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d123      	bne.n	8001c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	08da      	lsrs	r2, r3, #3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3208      	adds	r2, #8
 8001c8e:	69b9      	ldr	r1, [r7, #24]
 8001c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80b4 	beq.w	8001e3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	4b60      	ldr	r3, [pc, #384]	; (8001e5c <HAL_GPIO_Init+0x30c>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a5f      	ldr	r2, [pc, #380]	; (8001e5c <HAL_GPIO_Init+0x30c>)
 8001ce0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <HAL_GPIO_Init+0x30c>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf2:	4a5b      	ldr	r2, [pc, #364]	; (8001e60 <HAL_GPIO_Init+0x310>)
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	089b      	lsrs	r3, r3, #2
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_GPIO_Init+0x314>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d02b      	beq.n	8001d76 <HAL_GPIO_Init+0x226>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a51      	ldr	r2, [pc, #324]	; (8001e68 <HAL_GPIO_Init+0x318>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d025      	beq.n	8001d72 <HAL_GPIO_Init+0x222>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a50      	ldr	r2, [pc, #320]	; (8001e6c <HAL_GPIO_Init+0x31c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01f      	beq.n	8001d6e <HAL_GPIO_Init+0x21e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4f      	ldr	r2, [pc, #316]	; (8001e70 <HAL_GPIO_Init+0x320>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d019      	beq.n	8001d6a <HAL_GPIO_Init+0x21a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4e      	ldr	r2, [pc, #312]	; (8001e74 <HAL_GPIO_Init+0x324>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0x216>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4d      	ldr	r2, [pc, #308]	; (8001e78 <HAL_GPIO_Init+0x328>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00d      	beq.n	8001d62 <HAL_GPIO_Init+0x212>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4c      	ldr	r2, [pc, #304]	; (8001e7c <HAL_GPIO_Init+0x32c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0x20e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4b      	ldr	r2, [pc, #300]	; (8001e80 <HAL_GPIO_Init+0x330>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_GPIO_Init+0x20a>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e00e      	b.n	8001d78 <HAL_GPIO_Init+0x228>
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	e00c      	b.n	8001d78 <HAL_GPIO_Init+0x228>
 8001d5e:	2306      	movs	r3, #6
 8001d60:	e00a      	b.n	8001d78 <HAL_GPIO_Init+0x228>
 8001d62:	2305      	movs	r3, #5
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_Init+0x228>
 8001d66:	2304      	movs	r3, #4
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x228>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x228>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x228>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x228>
 8001d76:	2300      	movs	r3, #0
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	f002 0203 	and.w	r2, r2, #3
 8001d7e:	0092      	lsls	r2, r2, #2
 8001d80:	4093      	lsls	r3, r2
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d88:	4935      	ldr	r1, [pc, #212]	; (8001e60 <HAL_GPIO_Init+0x310>)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dba:	4a32      	ldr	r2, [pc, #200]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dc0:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001de4:	4a27      	ldr	r2, [pc, #156]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e38:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <HAL_GPIO_Init+0x334>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b0f      	cmp	r3, #15
 8001e48:	f67f ae90 	bls.w	8001b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3724      	adds	r7, #36	; 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40013800 	.word	0x40013800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40020400 	.word	0x40020400
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40021400 	.word	0x40021400
 8001e7c:	40021800 	.word	0x40021800
 8001e80:	40021c00 	.word	0x40021c00
 8001e84:	40013c00 	.word	0x40013c00

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea4:	e003      	b.n	8001eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	041a      	lsls	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	619a      	str	r2, [r3, #24]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e267      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d075      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eda:	4b88      	ldr	r3, [pc, #544]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d00c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee6:	4b85      	ldr	r3, [pc, #532]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d112      	bne.n	8001f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ef2:	4b82      	ldr	r3, [pc, #520]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	4b7e      	ldr	r3, [pc, #504]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d05b      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x108>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d157      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e242      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f20:	d106      	bne.n	8001f30 <HAL_RCC_OscConfig+0x74>
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a75      	ldr	r2, [pc, #468]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e01d      	b.n	8001f6c <HAL_RCC_OscConfig+0xb0>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x98>
 8001f3a:	4b70      	ldr	r3, [pc, #448]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a6f      	ldr	r2, [pc, #444]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	4b6d      	ldr	r3, [pc, #436]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a6c      	ldr	r2, [pc, #432]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0xb0>
 8001f54:	4b69      	ldr	r3, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a68      	ldr	r2, [pc, #416]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b66      	ldr	r3, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff f9e4 	bl	8001340 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f9e0 	bl	8001340 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	; 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e207      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b5b      	ldr	r3, [pc, #364]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0xc0>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f9d0 	bl	8001340 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f9cc 	bl	8001340 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1f3      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	4b51      	ldr	r3, [pc, #324]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xe8>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d063      	beq.n	800209a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd2:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d11c      	bne.n	8002024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fea:	4b44      	ldr	r3, [pc, #272]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d116      	bne.n	8002024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff6:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_RCC_OscConfig+0x152>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e1c7      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4937      	ldr	r1, [pc, #220]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	e03a      	b.n	800209a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202c:	4b34      	ldr	r3, [pc, #208]	; (8002100 <HAL_RCC_OscConfig+0x244>)
 800202e:	2201      	movs	r2, #1
 8002030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff f985 	bl	8001340 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203a:	f7ff f981 	bl	8001340 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1a8      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0f0      	beq.n	800203a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4925      	ldr	r1, [pc, #148]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]
 800206c:	e015      	b.n	800209a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x244>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7ff f964 	bl	8001340 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207c:	f7ff f960 	bl	8001340 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e187      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d036      	beq.n	8002114 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d016      	beq.n	80020dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_RCC_OscConfig+0x248>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b4:	f7ff f944 	bl	8001340 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020bc:	f7ff f940 	bl	8001340 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e167      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_OscConfig+0x240>)
 80020d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0x200>
 80020da:	e01b      	b.n	8002114 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020dc:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_RCC_OscConfig+0x248>)
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e2:	f7ff f92d 	bl	8001340 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	e00e      	b.n	8002108 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ea:	f7ff f929 	bl	8001340 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d907      	bls.n	8002108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e150      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
 80020fc:	40023800 	.word	0x40023800
 8002100:	42470000 	.word	0x42470000
 8002104:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002108:	4b88      	ldr	r3, [pc, #544]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800210a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1ea      	bne.n	80020ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8097 	beq.w	8002250 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002126:	4b81      	ldr	r3, [pc, #516]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b7d      	ldr	r3, [pc, #500]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a7c      	ldr	r2, [pc, #496]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b7a      	ldr	r3, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214e:	2301      	movs	r3, #1
 8002150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b77      	ldr	r3, [pc, #476]	; (8002330 <HAL_RCC_OscConfig+0x474>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d118      	bne.n	8002190 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800215e:	4b74      	ldr	r3, [pc, #464]	; (8002330 <HAL_RCC_OscConfig+0x474>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a73      	ldr	r2, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x474>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216a:	f7ff f8e9 	bl	8001340 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7ff f8e5 	bl	8001340 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e10c      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002184:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <HAL_RCC_OscConfig+0x474>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_OscConfig+0x2ea>
 8002198:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a63      	ldr	r2, [pc, #396]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
 80021a4:	e01c      	b.n	80021e0 <HAL_RCC_OscConfig+0x324>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b05      	cmp	r3, #5
 80021ac:	d10c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x30c>
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	4a5e      	ldr	r2, [pc, #376]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ba:	4b5c      	ldr	r3, [pc, #368]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a5b      	ldr	r2, [pc, #364]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
 80021c6:	e00b      	b.n	80021e0 <HAL_RCC_OscConfig+0x324>
 80021c8:	4b58      	ldr	r3, [pc, #352]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a57      	ldr	r2, [pc, #348]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021ce:	f023 0301 	bic.w	r3, r3, #1
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
 80021d4:	4b55      	ldr	r3, [pc, #340]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a54      	ldr	r2, [pc, #336]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80021da:	f023 0304 	bic.w	r3, r3, #4
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d015      	beq.n	8002214 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e8:	f7ff f8aa 	bl	8001340 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7ff f8a6 	bl	8001340 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e0cb      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0ee      	beq.n	80021f0 <HAL_RCC_OscConfig+0x334>
 8002212:	e014      	b.n	800223e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002214:	f7ff f894 	bl	8001340 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221a:	e00a      	b.n	8002232 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7ff f890 	bl	8001340 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e0b5      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002232:	4b3e      	ldr	r3, [pc, #248]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1ee      	bne.n	800221c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800223e:	7dfb      	ldrb	r3, [r7, #23]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d105      	bne.n	8002250 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	4a38      	ldr	r2, [pc, #224]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800224a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a1 	beq.w	800239c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800225a:	4b34      	ldr	r3, [pc, #208]	; (800232c <HAL_RCC_OscConfig+0x470>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b08      	cmp	r3, #8
 8002264:	d05c      	beq.n	8002320 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d141      	bne.n	80022f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_OscConfig+0x478>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff f864 	bl	8001340 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f860 	bl	8001340 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e087      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800228e:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	019b      	lsls	r3, r3, #6
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	085b      	lsrs	r3, r3, #1
 80022b2:	3b01      	subs	r3, #1
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	491b      	ldr	r1, [pc, #108]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x478>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ca:	f7ff f839 	bl	8001340 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d2:	f7ff f835 	bl	8001340 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e05c      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_OscConfig+0x470>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x416>
 80022f0:	e054      	b.n	800239c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_RCC_OscConfig+0x478>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff f822 	bl	8001340 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002300:	f7ff f81e 	bl	8001340 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e045      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCC_OscConfig+0x470>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x444>
 800231e:	e03d      	b.n	800239c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d107      	bne.n	8002338 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e038      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
 800232c:	40023800 	.word	0x40023800
 8002330:	40007000 	.word	0x40007000
 8002334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_RCC_OscConfig+0x4ec>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d028      	beq.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d121      	bne.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d11a      	bne.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002368:	4013      	ands	r3, r2
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800236e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002370:	4293      	cmp	r3, r2
 8002372:	d111      	bne.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	3b01      	subs	r3, #1
 8002382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d107      	bne.n	8002398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023800 	.word	0x40023800

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0cc      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b68      	ldr	r3, [pc, #416]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d90c      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b65      	ldr	r3, [pc, #404]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023d6:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e0b8      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d020      	beq.n	8002436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	4b59      	ldr	r3, [pc, #356]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a58      	ldr	r2, [pc, #352]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800240a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	4a52      	ldr	r2, [pc, #328]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b50      	ldr	r3, [pc, #320]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	494d      	ldr	r1, [pc, #308]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d044      	beq.n	80024cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d119      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e07f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d003      	beq.n	800246a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002466:	2b03      	cmp	r3, #3
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246a:	4b3f      	ldr	r3, [pc, #252]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e06f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e067      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248a:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4934      	ldr	r1, [pc, #208]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe ff50 	bl	8001340 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7fe ff4c 	bl	8001340 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e04f      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 020c 	and.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d1eb      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d20c      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_RCC_ClockConfig+0x1b8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e032      	b.n	800255a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	4916      	ldr	r1, [pc, #88]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	490e      	ldr	r1, [pc, #56]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002532:	f000 f821 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002536:	4602      	mov	r2, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	490a      	ldr	r1, [pc, #40]	; (800256c <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	5ccb      	ldrb	r3, [r1, r3]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a09      	ldr	r2, [pc, #36]	; (8002570 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1c8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe feb0 	bl	80012b8 <HAL_InitTick>

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00
 8002568:	40023800 	.word	0x40023800
 800256c:	080043a0 	.word	0x080043a0
 8002570:	20000014 	.word	0x20000014
 8002574:	20000018 	.word	0x20000018

08002578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257c:	b094      	sub	sp, #80	; 0x50
 800257e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
 8002584:	2300      	movs	r3, #0
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002588:	2300      	movs	r3, #0
 800258a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002590:	4b79      	ldr	r3, [pc, #484]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
 8002598:	2b08      	cmp	r3, #8
 800259a:	d00d      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x40>
 800259c:	2b08      	cmp	r3, #8
 800259e:	f200 80e1 	bhi.w	8002764 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x34>
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80025aa:	e0db      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025ac:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_RCC_GetSysClockFreq+0x204>)
 80025ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025b0:	e0db      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b2:	4b73      	ldr	r3, [pc, #460]	; (8002780 <HAL_RCC_GetSysClockFreq+0x208>)
 80025b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025b6:	e0d8      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b8:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d063      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ce:	4b6a      	ldr	r3, [pc, #424]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	2200      	movs	r2, #0
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e0:	633b      	str	r3, [r7, #48]	; 0x30
 80025e2:	2300      	movs	r3, #0
 80025e4:	637b      	str	r3, [r7, #52]	; 0x34
 80025e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ea:	4622      	mov	r2, r4
 80025ec:	462b      	mov	r3, r5
 80025ee:	f04f 0000 	mov.w	r0, #0
 80025f2:	f04f 0100 	mov.w	r1, #0
 80025f6:	0159      	lsls	r1, r3, #5
 80025f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fc:	0150      	lsls	r0, r2, #5
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4621      	mov	r1, r4
 8002604:	1a51      	subs	r1, r2, r1
 8002606:	6139      	str	r1, [r7, #16]
 8002608:	4629      	mov	r1, r5
 800260a:	eb63 0301 	sbc.w	r3, r3, r1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800261c:	4659      	mov	r1, fp
 800261e:	018b      	lsls	r3, r1, #6
 8002620:	4651      	mov	r1, sl
 8002622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002626:	4651      	mov	r1, sl
 8002628:	018a      	lsls	r2, r1, #6
 800262a:	4651      	mov	r1, sl
 800262c:	ebb2 0801 	subs.w	r8, r2, r1
 8002630:	4659      	mov	r1, fp
 8002632:	eb63 0901 	sbc.w	r9, r3, r1
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264a:	4690      	mov	r8, r2
 800264c:	4699      	mov	r9, r3
 800264e:	4623      	mov	r3, r4
 8002650:	eb18 0303 	adds.w	r3, r8, r3
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	462b      	mov	r3, r5
 8002658:	eb49 0303 	adc.w	r3, r9, r3
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800266a:	4629      	mov	r1, r5
 800266c:	024b      	lsls	r3, r1, #9
 800266e:	4621      	mov	r1, r4
 8002670:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002674:	4621      	mov	r1, r4
 8002676:	024a      	lsls	r2, r1, #9
 8002678:	4610      	mov	r0, r2
 800267a:	4619      	mov	r1, r3
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	2200      	movs	r2, #0
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
 8002682:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002684:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002688:	f7fd fd9e 	bl	80001c8 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4613      	mov	r3, r2
 8002692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002694:	e058      	b.n	8002748 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	099b      	lsrs	r3, r3, #6
 800269c:	2200      	movs	r2, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	4611      	mov	r1, r2
 80026a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
 80026ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b0:	4642      	mov	r2, r8
 80026b2:	464b      	mov	r3, r9
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	0159      	lsls	r1, r3, #5
 80026be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c2:	0150      	lsls	r0, r2, #5
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4641      	mov	r1, r8
 80026ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ce:	4649      	mov	r1, r9
 80026d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026e8:	ebb2 040a 	subs.w	r4, r2, sl
 80026ec:	eb63 050b 	sbc.w	r5, r3, fp
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	00eb      	lsls	r3, r5, #3
 80026fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026fe:	00e2      	lsls	r2, r4, #3
 8002700:	4614      	mov	r4, r2
 8002702:	461d      	mov	r5, r3
 8002704:	4643      	mov	r3, r8
 8002706:	18e3      	adds	r3, r4, r3
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	464b      	mov	r3, r9
 800270c:	eb45 0303 	adc.w	r3, r5, r3
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	f04f 0300 	mov.w	r3, #0
 800271a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800271e:	4629      	mov	r1, r5
 8002720:	028b      	lsls	r3, r1, #10
 8002722:	4621      	mov	r1, r4
 8002724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002728:	4621      	mov	r1, r4
 800272a:	028a      	lsls	r2, r1, #10
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002732:	2200      	movs	r2, #0
 8002734:	61bb      	str	r3, [r7, #24]
 8002736:	61fa      	str	r2, [r7, #28]
 8002738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800273c:	f7fd fd44 	bl	80001c8 <__aeabi_uldivmod>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4613      	mov	r3, r2
 8002746:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_GetSysClockFreq+0x200>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	0c1b      	lsrs	r3, r3, #16
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	3301      	adds	r3, #1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002758:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800275a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002762:	e002      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_GetSysClockFreq+0x204>)
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800276a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800276c:	4618      	mov	r0, r3
 800276e:	3750      	adds	r7, #80	; 0x50
 8002770:	46bd      	mov	sp, r7
 8002772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	00f42400 	.word	0x00f42400
 8002780:	007a1200 	.word	0x007a1200

08002784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002788:	4b03      	ldr	r3, [pc, #12]	; (8002798 <HAL_RCC_GetHCLKFreq+0x14>)
 800278a:	681b      	ldr	r3, [r3, #0]
}
 800278c:	4618      	mov	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000014 	.word	0x20000014

0800279c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027a0:	f7ff fff0 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027a4:	4602      	mov	r2, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0a9b      	lsrs	r3, r3, #10
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4903      	ldr	r1, [pc, #12]	; (80027c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b2:	5ccb      	ldrb	r3, [r1, r3]
 80027b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	080043b0 	.word	0x080043b0

080027c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027c8:	f7ff ffdc 	bl	8002784 <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	0b5b      	lsrs	r3, r3, #13
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027da:	5ccb      	ldrb	r3, [r1, r3]
 80027dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40023800 	.word	0x40023800
 80027e8:	080043b0 	.word	0x080043b0

080027ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e041      	b.n	8002882 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7fe fb2e 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3304      	adds	r3, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f000 fecc 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b01      	cmp	r3, #1
 800289e:	d001      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e04e      	b.n	8002942 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a23      	ldr	r2, [pc, #140]	; (8002950 <HAL_TIM_Base_Start_IT+0xc4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d022      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ce:	d01d      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <HAL_TIM_Base_Start_IT+0xc8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <HAL_TIM_Base_Start_IT+0xcc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_TIM_Base_Start_IT+0xd0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_TIM_Base_Start_IT+0xd4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_TIM_Base_Start_IT+0xd8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_TIM_Base_Start_IT+0x80>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_TIM_Base_Start_IT+0xdc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d111      	bne.n	8002930 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b06      	cmp	r3, #6
 800291c:	d010      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0201 	orr.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292e:	e007      	b.n	8002940 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40010000 	.word	0x40010000
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800
 800295c:	40000c00 	.word	0x40000c00
 8002960:	40010400 	.word	0x40010400
 8002964:	40014000 	.word	0x40014000
 8002968:	40001800 	.word	0x40001800

0800296c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e041      	b.n	8002a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f839 	bl	8002a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f000 fe0c 	bl	80035c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_TIM_PWM_Start+0x24>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e022      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d109      	bne.n	8002a5e <HAL_TIM_PWM_Start+0x3e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e015      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d109      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x58>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	bf14      	ite	ne
 8002a70:	2301      	movne	r3, #1
 8002a72:	2300      	moveq	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e008      	b.n	8002a8a <HAL_TIM_PWM_Start+0x6a>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	bf14      	ite	ne
 8002a84:	2301      	movne	r3, #1
 8002a86:	2300      	moveq	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07c      	b.n	8002b8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d104      	bne.n	8002aa2 <HAL_TIM_PWM_Start+0x82>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa0:	e013      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d104      	bne.n	8002ab2 <HAL_TIM_PWM_Start+0x92>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab0:	e00b      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d104      	bne.n	8002ac2 <HAL_TIM_PWM_Start+0xa2>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	e003      	b.n	8002aca <HAL_TIM_PWM_Start+0xaa>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 f862 	bl	8003b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2d      	ldr	r2, [pc, #180]	; (8002b94 <HAL_TIM_PWM_Start+0x174>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_TIM_PWM_Start+0xcc>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <HAL_TIM_PWM_Start+0x178>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_TIM_PWM_Start+0xd0>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_TIM_PWM_Start+0xd2>
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_TIM_PWM_Start+0x174>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x136>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b18:	d01d      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x136>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <HAL_TIM_PWM_Start+0x17c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d018      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x136>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_TIM_PWM_Start+0x180>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x136>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1c      	ldr	r2, [pc, #112]	; (8002ba4 <HAL_TIM_PWM_Start+0x184>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x136>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <HAL_TIM_PWM_Start+0x178>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x136>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <HAL_TIM_PWM_Start+0x188>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_TIM_PWM_Start+0x136>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a16      	ldr	r2, [pc, #88]	; (8002bac <HAL_TIM_PWM_Start+0x18c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d111      	bne.n	8002b7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d010      	beq.n	8002b8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b78:	e007      	b.n	8002b8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40010400 	.word	0x40010400
 8002b9c:	40000400 	.word	0x40000400
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40000c00 	.word	0x40000c00
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40001800 	.word	0x40001800

08002bb0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d104      	bne.n	8002bce <HAL_TIM_IC_Start_IT+0x1e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	e013      	b.n	8002bf6 <HAL_TIM_IC_Start_IT+0x46>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b04      	cmp	r3, #4
 8002bd2:	d104      	bne.n	8002bde <HAL_TIM_IC_Start_IT+0x2e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	e00b      	b.n	8002bf6 <HAL_TIM_IC_Start_IT+0x46>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d104      	bne.n	8002bee <HAL_TIM_IC_Start_IT+0x3e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	e003      	b.n	8002bf6 <HAL_TIM_IC_Start_IT+0x46>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d104      	bne.n	8002c08 <HAL_TIM_IC_Start_IT+0x58>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	e013      	b.n	8002c30 <HAL_TIM_IC_Start_IT+0x80>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d104      	bne.n	8002c18 <HAL_TIM_IC_Start_IT+0x68>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e00b      	b.n	8002c30 <HAL_TIM_IC_Start_IT+0x80>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d104      	bne.n	8002c28 <HAL_TIM_IC_Start_IT+0x78>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e003      	b.n	8002c30 <HAL_TIM_IC_Start_IT+0x80>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c32:	7bbb      	ldrb	r3, [r7, #14]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d102      	bne.n	8002c3e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c38:	7b7b      	ldrb	r3, [r7, #13]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d001      	beq.n	8002c42 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0cc      	b.n	8002ddc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_IC_Start_IT+0xa2>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c50:	e013      	b.n	8002c7a <HAL_TIM_IC_Start_IT+0xca>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_IC_Start_IT+0xb2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c60:	e00b      	b.n	8002c7a <HAL_TIM_IC_Start_IT+0xca>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_IC_Start_IT+0xc2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c70:	e003      	b.n	8002c7a <HAL_TIM_IC_Start_IT+0xca>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d104      	bne.n	8002c8a <HAL_TIM_IC_Start_IT+0xda>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c88:	e013      	b.n	8002cb2 <HAL_TIM_IC_Start_IT+0x102>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_IC_Start_IT+0xea>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c98:	e00b      	b.n	8002cb2 <HAL_TIM_IC_Start_IT+0x102>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_IC_Start_IT+0xfa>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca8:	e003      	b.n	8002cb2 <HAL_TIM_IC_Start_IT+0x102>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	d841      	bhi.n	8002d3c <HAL_TIM_IC_Start_IT+0x18c>
 8002cb8:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_TIM_IC_Start_IT+0x110>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	08002d3d 	.word	0x08002d3d
 8002cc8:	08002d3d 	.word	0x08002d3d
 8002ccc:	08002d3d 	.word	0x08002d3d
 8002cd0:	08002d07 	.word	0x08002d07
 8002cd4:	08002d3d 	.word	0x08002d3d
 8002cd8:	08002d3d 	.word	0x08002d3d
 8002cdc:	08002d3d 	.word	0x08002d3d
 8002ce0:	08002d19 	.word	0x08002d19
 8002ce4:	08002d3d 	.word	0x08002d3d
 8002ce8:	08002d3d 	.word	0x08002d3d
 8002cec:	08002d3d 	.word	0x08002d3d
 8002cf0:	08002d2b 	.word	0x08002d2b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0202 	orr.w	r2, r2, #2
 8002d02:	60da      	str	r2, [r3, #12]
      break;
 8002d04:	e01d      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0204 	orr.w	r2, r2, #4
 8002d14:	60da      	str	r2, [r3, #12]
      break;
 8002d16:	e014      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0208 	orr.w	r2, r2, #8
 8002d26:	60da      	str	r2, [r3, #12]
      break;
 8002d28:	e00b      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0210 	orr.w	r2, r2, #16
 8002d38:	60da      	str	r2, [r3, #12]
      break;
 8002d3a:	e002      	b.n	8002d42 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d148      	bne.n	8002dda <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	6839      	ldr	r1, [r7, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 ff23 	bl	8003b9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_TIM_IC_Start_IT+0x234>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d01d      	beq.n	8002da6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1e      	ldr	r2, [pc, #120]	; (8002de8 <HAL_TIM_IC_Start_IT+0x238>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d018      	beq.n	8002da6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <HAL_TIM_IC_Start_IT+0x23c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <HAL_TIM_IC_Start_IT+0x240>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_TIM_IC_Start_IT+0x244>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d009      	beq.n	8002da6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_TIM_IC_Start_IT+0x248>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_TIM_IC_Start_IT+0x1f6>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_TIM_IC_Start_IT+0x24c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d111      	bne.n	8002dca <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	d010      	beq.n	8002dda <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc8:	e007      	b.n	8002dda <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0201 	orr.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40000400 	.word	0x40000400
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40000c00 	.word	0x40000c00
 8002df4:	40010400 	.word	0x40010400
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40001800 	.word	0x40001800

08002e00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e097      	b.n	8002f44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d106      	bne.n	8002e2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7fe f861 	bl	8000ef0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e44:	f023 0307 	bic.w	r3, r3, #7
 8002e48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3304      	adds	r3, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4610      	mov	r0, r2
 8002e56:	f000 fbb7 	bl	80035c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e82:	f023 0303 	bic.w	r3, r3, #3
 8002e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	4313      	orrs	r3, r2
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ea0:	f023 030c 	bic.w	r3, r3, #12
 8002ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	011a      	lsls	r2, r3, #4
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	031b      	lsls	r3, r3, #12
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ede:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002ee6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d110      	bne.n	8002f9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d102      	bne.n	8002f88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f82:	7b7b      	ldrb	r3, [r7, #13]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d001      	beq.n	8002f8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e069      	b.n	8003060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f9c:	e031      	b.n	8003002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d110      	bne.n	8002fc6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fa4:	7bbb      	ldrb	r3, [r7, #14]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d102      	bne.n	8002fb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002faa:	7b3b      	ldrb	r3, [r7, #12]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d001      	beq.n	8002fb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e055      	b.n	8003060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fc4:	e01d      	b.n	8003002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d108      	bne.n	8002fde <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fcc:	7bbb      	ldrb	r3, [r7, #14]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d105      	bne.n	8002fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fd2:	7b7b      	ldrb	r3, [r7, #13]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d102      	bne.n	8002fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fd8:	7b3b      	ldrb	r3, [r7, #12]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d001      	beq.n	8002fe2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e03e      	b.n	8003060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2202      	movs	r2, #2
 8002fee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_TIM_Encoder_Start+0xc4>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d008      	beq.n	8003020 <HAL_TIM_Encoder_Start+0xd4>
 800300e:	e00f      	b.n	8003030 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2201      	movs	r2, #1
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 fdbf 	bl	8003b9c <TIM_CCxChannelCmd>
      break;
 800301e:	e016      	b.n	800304e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2201      	movs	r2, #1
 8003026:	2104      	movs	r1, #4
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fdb7 	bl	8003b9c <TIM_CCxChannelCmd>
      break;
 800302e:	e00e      	b.n	800304e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fdaf 	bl	8003b9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	2104      	movs	r1, #4
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fda8 	bl	8003b9c <TIM_CCxChannelCmd>
      break;
 800304c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b02      	cmp	r3, #2
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0202 	mvn.w	r2, #2
 8003094:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd fc96 	bl	80009dc <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fa69 	bl	800358a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fa70 	bl	800359e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b04      	cmp	r3, #4
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0204 	mvn.w	r2, #4
 80030e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd fc6c 	bl	80009dc <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fa3f 	bl	800358a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fa46 	bl	800359e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b08      	cmp	r3, #8
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b08      	cmp	r3, #8
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0208 	mvn.w	r2, #8
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2204      	movs	r2, #4
 8003142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fc42 	bl	80009dc <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fa15 	bl	800358a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fa1c 	bl	800359e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b10      	cmp	r3, #16
 8003178:	d122      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d11b      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0210 	mvn.w	r2, #16
 8003190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2208      	movs	r2, #8
 8003196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fd fc18 	bl	80009dc <HAL_TIM_IC_CaptureCallback>
 80031ac:	e005      	b.n	80031ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f9eb 	bl	800358a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f9f2 	bl	800359e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d10e      	bne.n	80031ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0201 	mvn.w	r2, #1
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd fc4e 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b80      	cmp	r3, #128	; 0x80
 80031f8:	d10e      	bne.n	8003218 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b80      	cmp	r3, #128	; 0x80
 8003206:	d107      	bne.n	8003218 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 fdc0 	bl	8003d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003222:	2b40      	cmp	r3, #64	; 0x40
 8003224:	d10e      	bne.n	8003244 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b40      	cmp	r3, #64	; 0x40
 8003232:	d107      	bne.n	8003244 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f9b7 	bl	80035b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b20      	cmp	r3, #32
 8003250:	d10e      	bne.n	8003270 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b20      	cmp	r3, #32
 800325e:	d107      	bne.n	8003270 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0220 	mvn.w	r2, #32
 8003268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fd8a 	bl	8003d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003270:	bf00      	nop
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003284:	2300      	movs	r3, #0
 8003286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003292:	2302      	movs	r3, #2
 8003294:	e0ae      	b.n	80033f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	f200 809f 	bhi.w	80033e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032a6:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	080033e5 	.word	0x080033e5
 80032b4:	080033e5 	.word	0x080033e5
 80032b8:	080033e5 	.word	0x080033e5
 80032bc:	08003321 	.word	0x08003321
 80032c0:	080033e5 	.word	0x080033e5
 80032c4:	080033e5 	.word	0x080033e5
 80032c8:	080033e5 	.word	0x080033e5
 80032cc:	08003363 	.word	0x08003363
 80032d0:	080033e5 	.word	0x080033e5
 80032d4:	080033e5 	.word	0x080033e5
 80032d8:	080033e5 	.word	0x080033e5
 80032dc:	080033a3 	.word	0x080033a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa0e 	bl	8003708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0208 	orr.w	r2, r2, #8
 80032fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0204 	bic.w	r2, r2, #4
 800330a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6999      	ldr	r1, [r3, #24]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	619a      	str	r2, [r3, #24]
      break;
 800331e:	e064      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fa5e 	bl	80037e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6999      	ldr	r1, [r3, #24]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	021a      	lsls	r2, r3, #8
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	619a      	str	r2, [r3, #24]
      break;
 8003360:	e043      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fab3 	bl	80038d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0208 	orr.w	r2, r2, #8
 800337c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0204 	bic.w	r2, r2, #4
 800338c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69d9      	ldr	r1, [r3, #28]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	61da      	str	r2, [r3, #28]
      break;
 80033a0:	e023      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fb07 	bl	80039bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69d9      	ldr	r1, [r3, #28]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	021a      	lsls	r2, r3, #8
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	61da      	str	r2, [r3, #28]
      break;
 80033e2:	e002      	b.n	80033ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	75fb      	strb	r3, [r7, #23]
      break;
 80033e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003406:	2300      	movs	r3, #0
 8003408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003410:	2b01      	cmp	r3, #1
 8003412:	d101      	bne.n	8003418 <HAL_TIM_ConfigClockSource+0x1c>
 8003414:	2302      	movs	r3, #2
 8003416:	e0b4      	b.n	8003582 <HAL_TIM_ConfigClockSource+0x186>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800343e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003450:	d03e      	beq.n	80034d0 <HAL_TIM_ConfigClockSource+0xd4>
 8003452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003456:	f200 8087 	bhi.w	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345e:	f000 8086 	beq.w	800356e <HAL_TIM_ConfigClockSource+0x172>
 8003462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003466:	d87f      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b70      	cmp	r3, #112	; 0x70
 800346a:	d01a      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0xa6>
 800346c:	2b70      	cmp	r3, #112	; 0x70
 800346e:	d87b      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b60      	cmp	r3, #96	; 0x60
 8003472:	d050      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x11a>
 8003474:	2b60      	cmp	r3, #96	; 0x60
 8003476:	d877      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b50      	cmp	r3, #80	; 0x50
 800347a:	d03c      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0xfa>
 800347c:	2b50      	cmp	r3, #80	; 0x50
 800347e:	d873      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d058      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x13a>
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d86f      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b30      	cmp	r3, #48	; 0x30
 800348a:	d064      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	2b30      	cmp	r3, #48	; 0x30
 800348e:	d86b      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b20      	cmp	r3, #32
 8003492:	d060      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x15a>
 8003494:	2b20      	cmp	r3, #32
 8003496:	d867      	bhi.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d05c      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x15a>
 800349c:	2b10      	cmp	r3, #16
 800349e:	d05a      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x15a>
 80034a0:	e062      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6899      	ldr	r1, [r3, #8]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f000 fb53 	bl	8003b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	609a      	str	r2, [r3, #8]
      break;
 80034ce:	e04f      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	6899      	ldr	r1, [r3, #8]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f000 fb3c 	bl	8003b5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f2:	609a      	str	r2, [r3, #8]
      break;
 80034f4:	e03c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	461a      	mov	r2, r3
 8003504:	f000 fab0 	bl	8003a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2150      	movs	r1, #80	; 0x50
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fb09 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003514:	e02c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	461a      	mov	r2, r3
 8003524:	f000 facf 	bl	8003ac6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2160      	movs	r1, #96	; 0x60
 800352e:	4618      	mov	r0, r3
 8003530:	f000 faf9 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003534:	e01c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	461a      	mov	r2, r3
 8003544:	f000 fa90 	bl	8003a68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2140      	movs	r1, #64	; 0x40
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fae9 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003554:	e00c      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	4610      	mov	r0, r2
 8003562:	f000 fae0 	bl	8003b26 <TIM_ITRx_SetConfig>
      break;
 8003566:	e003      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
      break;
 800356c:	e000      	b.n	8003570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800356e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a40      	ldr	r2, [pc, #256]	; (80036dc <TIM_Base_SetConfig+0x114>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d013      	beq.n	8003608 <TIM_Base_SetConfig+0x40>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e6:	d00f      	beq.n	8003608 <TIM_Base_SetConfig+0x40>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a3d      	ldr	r2, [pc, #244]	; (80036e0 <TIM_Base_SetConfig+0x118>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00b      	beq.n	8003608 <TIM_Base_SetConfig+0x40>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a3c      	ldr	r2, [pc, #240]	; (80036e4 <TIM_Base_SetConfig+0x11c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_Base_SetConfig+0x40>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3b      	ldr	r2, [pc, #236]	; (80036e8 <TIM_Base_SetConfig+0x120>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_Base_SetConfig+0x40>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <TIM_Base_SetConfig+0x124>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d108      	bne.n	800361a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800360e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2f      	ldr	r2, [pc, #188]	; (80036dc <TIM_Base_SetConfig+0x114>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d02b      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003628:	d027      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a2c      	ldr	r2, [pc, #176]	; (80036e0 <TIM_Base_SetConfig+0x118>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d023      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <TIM_Base_SetConfig+0x11c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01f      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <TIM_Base_SetConfig+0x120>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d01b      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a29      	ldr	r2, [pc, #164]	; (80036ec <TIM_Base_SetConfig+0x124>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d017      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a28      	ldr	r2, [pc, #160]	; (80036f0 <TIM_Base_SetConfig+0x128>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d013      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a27      	ldr	r2, [pc, #156]	; (80036f4 <TIM_Base_SetConfig+0x12c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d00f      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a26      	ldr	r2, [pc, #152]	; (80036f8 <TIM_Base_SetConfig+0x130>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d00b      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a25      	ldr	r2, [pc, #148]	; (80036fc <TIM_Base_SetConfig+0x134>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d007      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a24      	ldr	r2, [pc, #144]	; (8003700 <TIM_Base_SetConfig+0x138>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d003      	beq.n	800367a <TIM_Base_SetConfig+0xb2>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <TIM_Base_SetConfig+0x13c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d108      	bne.n	800368c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <TIM_Base_SetConfig+0x114>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_Base_SetConfig+0xf8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <TIM_Base_SetConfig+0x124>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d103      	bne.n	80036c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	615a      	str	r2, [r3, #20]
}
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	40010000 	.word	0x40010000
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40000800 	.word	0x40000800
 80036e8:	40000c00 	.word	0x40000c00
 80036ec:	40010400 	.word	0x40010400
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800
 80036fc:	40001800 	.word	0x40001800
 8003700:	40001c00 	.word	0x40001c00
 8003704:	40002000 	.word	0x40002000

08003708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f023 0302 	bic.w	r3, r3, #2
 8003750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a20      	ldr	r2, [pc, #128]	; (80037e0 <TIM_OC1_SetConfig+0xd8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_OC1_SetConfig+0x64>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a1f      	ldr	r2, [pc, #124]	; (80037e4 <TIM_OC1_SetConfig+0xdc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d10c      	bne.n	8003786 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 0308 	bic.w	r3, r3, #8
 8003772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <TIM_OC1_SetConfig+0xd8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <TIM_OC1_SetConfig+0x8e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <TIM_OC1_SetConfig+0xdc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d111      	bne.n	80037ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800379c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40010400 	.word	0x40010400

080037e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f023 0210 	bic.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0320 	bic.w	r3, r3, #32
 8003832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a22      	ldr	r2, [pc, #136]	; (80038cc <TIM_OC2_SetConfig+0xe4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d003      	beq.n	8003850 <TIM_OC2_SetConfig+0x68>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4a21      	ldr	r2, [pc, #132]	; (80038d0 <TIM_OC2_SetConfig+0xe8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d10d      	bne.n	800386c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a17      	ldr	r2, [pc, #92]	; (80038cc <TIM_OC2_SetConfig+0xe4>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d003      	beq.n	800387c <TIM_OC2_SetConfig+0x94>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <TIM_OC2_SetConfig+0xe8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d113      	bne.n	80038a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800388a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40010000 	.word	0x40010000
 80038d0:	40010400 	.word	0x40010400

080038d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0303 	bic.w	r3, r3, #3
 800390a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800391c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a21      	ldr	r2, [pc, #132]	; (80039b4 <TIM_OC3_SetConfig+0xe0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_OC3_SetConfig+0x66>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <TIM_OC3_SetConfig+0xe4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10d      	bne.n	8003956 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a16      	ldr	r2, [pc, #88]	; (80039b4 <TIM_OC3_SetConfig+0xe0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_OC3_SetConfig+0x92>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <TIM_OC3_SetConfig+0xe4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d113      	bne.n	800398e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800396c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	621a      	str	r2, [r3, #32]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40010400 	.word	0x40010400

080039bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	031b      	lsls	r3, r3, #12
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <TIM_OC4_SetConfig+0xa4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_OC4_SetConfig+0x68>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a11      	ldr	r2, [pc, #68]	; (8003a64 <TIM_OC4_SetConfig+0xa8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d109      	bne.n	8003a38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40010400 	.word	0x40010400

08003a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f023 0201 	bic.w	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f023 030a 	bic.w	r3, r3, #10
 8003aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	621a      	str	r2, [r3, #32]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b087      	sub	sp, #28
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	f023 0210 	bic.w	r2, r3, #16
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003af0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	031b      	lsls	r3, r3, #12
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	693a      	ldr	r2, [r7, #16]
 8003b18:	621a      	str	r2, [r3, #32]
}
 8003b1a:	bf00      	nop
 8003b1c:	371c      	adds	r7, #28
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f043 0307 	orr.w	r3, r3, #7
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	609a      	str	r2, [r3, #8]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	021a      	lsls	r2, r3, #8
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	609a      	str	r2, [r3, #8]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	621a      	str	r2, [r3, #32]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e05a      	b.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d022      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c4c:	d01d      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1a      	ldr	r2, [pc, #104]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a18      	ldr	r2, [pc, #96]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a17      	ldr	r2, [pc, #92]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40010400 	.word	0x40010400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40001800 	.word	0x40001800

08003ce0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e03d      	b.n	8003d78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e03f      	b.n	8003e3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd f914 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2224      	movs	r2, #36	; 0x24
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f829 	bl	8003e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e4c:	b0c0      	sub	sp, #256	; 0x100
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e64:	68d9      	ldr	r1, [r3, #12]
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	ea40 0301 	orr.w	r3, r0, r1
 8003e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	431a      	orrs	r2, r3
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ea0:	f021 010c 	bic.w	r1, r1, #12
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec2:	6999      	ldr	r1, [r3, #24]
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	ea40 0301 	orr.w	r3, r0, r1
 8003ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b8f      	ldr	r3, [pc, #572]	; (8004114 <UART_SetConfig+0x2cc>)
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d005      	beq.n	8003ee8 <UART_SetConfig+0xa0>
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4b8d      	ldr	r3, [pc, #564]	; (8004118 <UART_SetConfig+0x2d0>)
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d104      	bne.n	8003ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ee8:	f7fe fc6c 	bl	80027c4 <HAL_RCC_GetPCLK2Freq>
 8003eec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ef0:	e003      	b.n	8003efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ef2:	f7fe fc53 	bl	800279c <HAL_RCC_GetPCLK1Freq>
 8003ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f04:	f040 810c 	bne.w	8004120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	462b      	mov	r3, r5
 8003f1e:	1891      	adds	r1, r2, r2
 8003f20:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f22:	415b      	adcs	r3, r3
 8003f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	eb12 0801 	adds.w	r8, r2, r1
 8003f30:	4629      	mov	r1, r5
 8003f32:	eb43 0901 	adc.w	r9, r3, r1
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f4a:	4690      	mov	r8, r2
 8003f4c:	4699      	mov	r9, r3
 8003f4e:	4623      	mov	r3, r4
 8003f50:	eb18 0303 	adds.w	r3, r8, r3
 8003f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f58:	462b      	mov	r3, r5
 8003f5a:	eb49 0303 	adc.w	r3, r9, r3
 8003f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f76:	460b      	mov	r3, r1
 8003f78:	18db      	adds	r3, r3, r3
 8003f7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	eb42 0303 	adc.w	r3, r2, r3
 8003f82:	657b      	str	r3, [r7, #84]	; 0x54
 8003f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f8c:	f7fc f91c 	bl	80001c8 <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4b61      	ldr	r3, [pc, #388]	; (800411c <UART_SetConfig+0x2d4>)
 8003f96:	fba3 2302 	umull	r2, r3, r3, r2
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	011c      	lsls	r4, r3, #4
 8003f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	1891      	adds	r1, r2, r2
 8003fb6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fb8:	415b      	adcs	r3, r3
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fc0:	4641      	mov	r1, r8
 8003fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8003fc6:	4649      	mov	r1, r9
 8003fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe0:	4692      	mov	sl, r2
 8003fe2:	469b      	mov	fp, r3
 8003fe4:	4643      	mov	r3, r8
 8003fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8003fea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fee:	464b      	mov	r3, r9
 8003ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004004:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800400c:	460b      	mov	r3, r1
 800400e:	18db      	adds	r3, r3, r3
 8004010:	643b      	str	r3, [r7, #64]	; 0x40
 8004012:	4613      	mov	r3, r2
 8004014:	eb42 0303 	adc.w	r3, r2, r3
 8004018:	647b      	str	r3, [r7, #68]	; 0x44
 800401a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800401e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004022:	f7fc f8d1 	bl	80001c8 <__aeabi_uldivmod>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4611      	mov	r1, r2
 800402c:	4b3b      	ldr	r3, [pc, #236]	; (800411c <UART_SetConfig+0x2d4>)
 800402e:	fba3 2301 	umull	r2, r3, r3, r1
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	2264      	movs	r2, #100	; 0x64
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	1acb      	subs	r3, r1, r3
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004042:	4b36      	ldr	r3, [pc, #216]	; (800411c <UART_SetConfig+0x2d4>)
 8004044:	fba3 2302 	umull	r2, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004050:	441c      	add	r4, r3
 8004052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800405c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	1891      	adds	r1, r2, r2
 800406a:	63b9      	str	r1, [r7, #56]	; 0x38
 800406c:	415b      	adcs	r3, r3
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004074:	4641      	mov	r1, r8
 8004076:	1851      	adds	r1, r2, r1
 8004078:	6339      	str	r1, [r7, #48]	; 0x30
 800407a:	4649      	mov	r1, r9
 800407c:	414b      	adcs	r3, r1
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800408c:	4659      	mov	r1, fp
 800408e:	00cb      	lsls	r3, r1, #3
 8004090:	4651      	mov	r1, sl
 8004092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004096:	4651      	mov	r1, sl
 8004098:	00ca      	lsls	r2, r1, #3
 800409a:	4610      	mov	r0, r2
 800409c:	4619      	mov	r1, r3
 800409e:	4603      	mov	r3, r0
 80040a0:	4642      	mov	r2, r8
 80040a2:	189b      	adds	r3, r3, r2
 80040a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040a8:	464b      	mov	r3, r9
 80040aa:	460a      	mov	r2, r1
 80040ac:	eb42 0303 	adc.w	r3, r2, r3
 80040b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040c8:	460b      	mov	r3, r1
 80040ca:	18db      	adds	r3, r3, r3
 80040cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ce:	4613      	mov	r3, r2
 80040d0:	eb42 0303 	adc.w	r3, r2, r3
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040de:	f7fc f873 	bl	80001c8 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4b0d      	ldr	r3, [pc, #52]	; (800411c <UART_SetConfig+0x2d4>)
 80040e8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	2164      	movs	r1, #100	; 0x64
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	3332      	adds	r3, #50	; 0x32
 80040fa:	4a08      	ldr	r2, [pc, #32]	; (800411c <UART_SetConfig+0x2d4>)
 80040fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	f003 0207 	and.w	r2, r3, #7
 8004106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4422      	add	r2, r4
 800410e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004110:	e106      	b.n	8004320 <UART_SetConfig+0x4d8>
 8004112:	bf00      	nop
 8004114:	40011000 	.word	0x40011000
 8004118:	40011400 	.word	0x40011400
 800411c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004124:	2200      	movs	r2, #0
 8004126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800412a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800412e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004132:	4642      	mov	r2, r8
 8004134:	464b      	mov	r3, r9
 8004136:	1891      	adds	r1, r2, r2
 8004138:	6239      	str	r1, [r7, #32]
 800413a:	415b      	adcs	r3, r3
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
 800413e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004142:	4641      	mov	r1, r8
 8004144:	1854      	adds	r4, r2, r1
 8004146:	4649      	mov	r1, r9
 8004148:	eb43 0501 	adc.w	r5, r3, r1
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	00eb      	lsls	r3, r5, #3
 8004156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800415a:	00e2      	lsls	r2, r4, #3
 800415c:	4614      	mov	r4, r2
 800415e:	461d      	mov	r5, r3
 8004160:	4643      	mov	r3, r8
 8004162:	18e3      	adds	r3, r4, r3
 8004164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004168:	464b      	mov	r3, r9
 800416a:	eb45 0303 	adc.w	r3, r5, r3
 800416e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800417e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	f04f 0300 	mov.w	r3, #0
 800418a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800418e:	4629      	mov	r1, r5
 8004190:	008b      	lsls	r3, r1, #2
 8004192:	4621      	mov	r1, r4
 8004194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004198:	4621      	mov	r1, r4
 800419a:	008a      	lsls	r2, r1, #2
 800419c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041a0:	f7fc f812 	bl	80001c8 <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4b60      	ldr	r3, [pc, #384]	; (800432c <UART_SetConfig+0x4e4>)
 80041aa:	fba3 2302 	umull	r2, r3, r3, r2
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	011c      	lsls	r4, r3, #4
 80041b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	1891      	adds	r1, r2, r2
 80041ca:	61b9      	str	r1, [r7, #24]
 80041cc:	415b      	adcs	r3, r3
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d4:	4641      	mov	r1, r8
 80041d6:	1851      	adds	r1, r2, r1
 80041d8:	6139      	str	r1, [r7, #16]
 80041da:	4649      	mov	r1, r9
 80041dc:	414b      	adcs	r3, r1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ec:	4659      	mov	r1, fp
 80041ee:	00cb      	lsls	r3, r1, #3
 80041f0:	4651      	mov	r1, sl
 80041f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f6:	4651      	mov	r1, sl
 80041f8:	00ca      	lsls	r2, r1, #3
 80041fa:	4610      	mov	r0, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	4603      	mov	r3, r0
 8004200:	4642      	mov	r2, r8
 8004202:	189b      	adds	r3, r3, r2
 8004204:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004208:	464b      	mov	r3, r9
 800420a:	460a      	mov	r2, r1
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	67bb      	str	r3, [r7, #120]	; 0x78
 800421e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800422c:	4649      	mov	r1, r9
 800422e:	008b      	lsls	r3, r1, #2
 8004230:	4641      	mov	r1, r8
 8004232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004236:	4641      	mov	r1, r8
 8004238:	008a      	lsls	r2, r1, #2
 800423a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800423e:	f7fb ffc3 	bl	80001c8 <__aeabi_uldivmod>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4611      	mov	r1, r2
 8004248:	4b38      	ldr	r3, [pc, #224]	; (800432c <UART_SetConfig+0x4e4>)
 800424a:	fba3 2301 	umull	r2, r3, r3, r1
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	2264      	movs	r2, #100	; 0x64
 8004252:	fb02 f303 	mul.w	r3, r2, r3
 8004256:	1acb      	subs	r3, r1, r3
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	3332      	adds	r3, #50	; 0x32
 800425c:	4a33      	ldr	r2, [pc, #204]	; (800432c <UART_SetConfig+0x4e4>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004268:	441c      	add	r4, r3
 800426a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800426e:	2200      	movs	r2, #0
 8004270:	673b      	str	r3, [r7, #112]	; 0x70
 8004272:	677a      	str	r2, [r7, #116]	; 0x74
 8004274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	1891      	adds	r1, r2, r2
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	415b      	adcs	r3, r3
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004288:	4641      	mov	r1, r8
 800428a:	1851      	adds	r1, r2, r1
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	4649      	mov	r1, r9
 8004290:	414b      	adcs	r3, r1
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042a0:	4659      	mov	r1, fp
 80042a2:	00cb      	lsls	r3, r1, #3
 80042a4:	4651      	mov	r1, sl
 80042a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042aa:	4651      	mov	r1, sl
 80042ac:	00ca      	lsls	r2, r1, #3
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	4642      	mov	r2, r8
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80042ba:	464b      	mov	r3, r9
 80042bc:	460a      	mov	r2, r1
 80042be:	eb42 0303 	adc.w	r3, r2, r3
 80042c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	663b      	str	r3, [r7, #96]	; 0x60
 80042ce:	667a      	str	r2, [r7, #100]	; 0x64
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042dc:	4649      	mov	r1, r9
 80042de:	008b      	lsls	r3, r1, #2
 80042e0:	4641      	mov	r1, r8
 80042e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e6:	4641      	mov	r1, r8
 80042e8:	008a      	lsls	r2, r1, #2
 80042ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042ee:	f7fb ff6b 	bl	80001c8 <__aeabi_uldivmod>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4b0d      	ldr	r3, [pc, #52]	; (800432c <UART_SetConfig+0x4e4>)
 80042f8:	fba3 1302 	umull	r1, r3, r3, r2
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	2164      	movs	r1, #100	; 0x64
 8004300:	fb01 f303 	mul.w	r3, r1, r3
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	3332      	adds	r3, #50	; 0x32
 800430a:	4a08      	ldr	r2, [pc, #32]	; (800432c <UART_SetConfig+0x4e4>)
 800430c:	fba2 2303 	umull	r2, r3, r2, r3
 8004310:	095b      	lsrs	r3, r3, #5
 8004312:	f003 020f 	and.w	r2, r3, #15
 8004316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4422      	add	r2, r4
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004326:	46bd      	mov	sp, r7
 8004328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800432c:	51eb851f 	.word	0x51eb851f

08004330 <memset>:
 8004330:	4402      	add	r2, r0
 8004332:	4603      	mov	r3, r0
 8004334:	4293      	cmp	r3, r2
 8004336:	d100      	bne.n	800433a <memset+0xa>
 8004338:	4770      	bx	lr
 800433a:	f803 1b01 	strb.w	r1, [r3], #1
 800433e:	e7f9      	b.n	8004334 <memset+0x4>

08004340 <__libc_init_array>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4d0d      	ldr	r5, [pc, #52]	; (8004378 <__libc_init_array+0x38>)
 8004344:	4c0d      	ldr	r4, [pc, #52]	; (800437c <__libc_init_array+0x3c>)
 8004346:	1b64      	subs	r4, r4, r5
 8004348:	10a4      	asrs	r4, r4, #2
 800434a:	2600      	movs	r6, #0
 800434c:	42a6      	cmp	r6, r4
 800434e:	d109      	bne.n	8004364 <__libc_init_array+0x24>
 8004350:	4d0b      	ldr	r5, [pc, #44]	; (8004380 <__libc_init_array+0x40>)
 8004352:	4c0c      	ldr	r4, [pc, #48]	; (8004384 <__libc_init_array+0x44>)
 8004354:	f000 f818 	bl	8004388 <_init>
 8004358:	1b64      	subs	r4, r4, r5
 800435a:	10a4      	asrs	r4, r4, #2
 800435c:	2600      	movs	r6, #0
 800435e:	42a6      	cmp	r6, r4
 8004360:	d105      	bne.n	800436e <__libc_init_array+0x2e>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	f855 3b04 	ldr.w	r3, [r5], #4
 8004368:	4798      	blx	r3
 800436a:	3601      	adds	r6, #1
 800436c:	e7ee      	b.n	800434c <__libc_init_array+0xc>
 800436e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004372:	4798      	blx	r3
 8004374:	3601      	adds	r6, #1
 8004376:	e7f2      	b.n	800435e <__libc_init_array+0x1e>
 8004378:	080043c8 	.word	0x080043c8
 800437c:	080043c8 	.word	0x080043c8
 8004380:	080043c8 	.word	0x080043c8
 8004384:	080043cc 	.word	0x080043cc

08004388 <_init>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	bf00      	nop
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr

08004394 <_fini>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	bf00      	nop
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr
